include mixins/noteLink
doctype html
html(lang='en')
  head
    title My notes
    // vis.js
    script(src="modules/external/vis-js.min.js" rel="script")
    link(href="modules/external/vis-js-timeline-graph2d.css" rel="stylesheet" type="text/css")
    // tagify 
    script(src="modules/external/tagify.min.js")
    script(src="modules/external/tagify-polyfills.js")
    link(href="modules/external/tagify.min.css" rel="stylesheet" type="text/css")
    // custom scripts
    script(src="modules/internal/filterNotes.js")
    // timeline styles
    link(rel="stylesheet" href="styles/style.css")
    link(rel="stylesheet" href="styles/timeline.css")
    include includes/commonHead.pug
  body
    h1 My notes 
    div.section 
      h2 Most recent 
      each note in notes.sort((a,b)=> new Date(b.fm.lastNoted) - new Date(a.fm.lastNoted)).slice(0, 5)
        +notesLink(note)


    h2 Explore
    details 
      summary Filters 
      div 
        div.section
          div.flex
            label.inline-item(for="types-input") Type
            div.filter-controls.inline-item
              button#reset-types-button (show all)
              button#clear-types-button (clear all)
          input(name="types-input")#types-input
        div.section
          div.flex
            label.inline-item(for="tags-input") Tags
            div.filter-controls.inline-item
              button#reset-tags-button (Apply all tags)
              button#clear-tags-button (clear all)
          input(name="tags-input")#tags-input
  
    div#timelines-container
    div
      div.flex
        p.inline-item Toggle View
        button.inline-item.toggle#timeline-toggle
          div.toggle-switch

      div#timeline-yp-container
        h3 By year published
        p 
          em Scroll to zoom, drag to pan
        div#timeline-yp

      div#timeline-ln-container.hide-by-offset 
        h3 By last noted
        p 
          em Scroll to zoom, drag to pan
        div#timeline-ln
    
    div
      h3 List view by author
      each note in notes
        +notesLink(note)

    script(type="text/javascript"). 
      //////////////////////////
      // GLOBAL STATE 
      const globalFilters = {
        types: 'all',
        tags: 'all',
        authors: 'all'
      }

      let timelineViewIsLp = true

      // get notes and info from variable passed into template
      const nts = !{JSON.stringify(notes)}
      const inf = !{JSON.stringify(info)}

      let globalFilteredNotes = [...nts]


      //////////////////////////
      // TIMELINE (vis.js)

      // Set up timelines
      const timelineYpEl = document.getElementById('timeline-yp')
      const timelineLnEl = document.getElementById('timeline-ln')

      const ypDatasetInit = toTimeLineDataset(notesToYpItems(globalFilteredNotes))
      const lnDatasetInit = toTimeLineDataset(notesToLnItems(globalFilteredNotes))
      
      const options = {
        orientation: {axis: 'both', item: 'top'}
      }
      const timelineYp = new vis.Timeline(timelineYpEl, ypDatasetInit, {...options,
        showCurrentTime: false,
      });
      const timelineLn = new vis.Timeline(timelineLnEl, lnDatasetInit, options);
      
      function updateTimelines() {
        const ypDataset = toTimeLineDataset(notesToYpItems(globalFilteredNotes))
        const lnDataset = toTimeLineDataset(notesToLnItems(globalFilteredNotes))

        timelineYp.setItems(ypDataset)
        timelineYp.redraw()

        timelineLn.setItems(lnDataset)
        timelineLn.redraw()
      }

      function notesToYpItems(_notes) {
        return _notes.map(n => ({ 
          id: n.id, 
          content: buildTimelineContent(n), 
          start: new Date(n.fm.yearPublished, 0, 1)
        }))
      }

      function notesToLnItems(_notes) {
        return _notes.map(n => ({ 
          id: n.id, 
          content: buildTimelineContent(n), 
          start: new Date(n.fm.lastNoted)
        }))
      }

      function toTimeLineDataset (_items) {
        return new vis.DataSet(_items)
      }

      // TODO: Link to templated notes page in static website. Currently links to github
      function buildTimelineContent(_note) {
        return `
          <div className="tl-content">
            <a href="notes/${_note.slug}" target="_blank" rel="noopener noreferrer nofollow">
            <span>${_note.fm.title}</span>
            </a>
          </div>
        `
      }

      // Toggle timeline views
      const timelineToggle = document.getElementById("timeline-toggle")
      timelineToggle.addEventListener('click', (e) => {
        e.preventDefault();
        timelineToggle.classList.toggle('active')
        toggleTimelineView()
      })

      const timelineYpContainer = document.getElementById("timeline-yp-container")
      const timelineLnContainer = document.getElementById("timeline-ln-container")

      function toggleTimelineView() {
        // in case needed for something else...
        timelineViewIsLp = !timelineViewIsLp
        timelineYpContainer.classList.toggle("hide-by-offset")
        timelineLnContainer.classList.toggle("hide-by-offset")
      }
      
      ///////////////////////
      // TAGIFY 
      const sharedTagifyOpts = {
        duplicates: false,
        enforceWhitelist: true,
        skipInvalid: true,
        editTags: false,
        dropdown: { 
          enabled: 1,
          highlightFirst: true 
        },
      }
      const allTags = Object.keys(inf.summary.tags.map)
      const allTypes = Object.keys(inf.summary.types.map)

      const tagsInput = document.getElementById("tags-input"),
      tagsTagifyInput = new Tagify(tagsInput, {
        id: 'tags',  // must be unique (per-tagify instance)
        whitelist: allTags,
        ...sharedTagifyOpts
      });

      const typeInput = document.getElementById("types-input"),
      typeTagifyInput = new Tagify(typeInput, {
        id: 'types',  // must be unique (per-tagify instance)
        whitelist: allTypes,
        ...sharedTagifyOpts
      });

      // Tagify helpers
      function resetTagifyInput(tagifyInput, initialTags) {
        tagifyInput.removeAllTags()
        tagifyInput.addTags(initialTags)
      }

      function clearTagifyInput(tagifyInput) {
        tagifyInput.removeAllTags()
      }

      // Tagify: tags input
      const resetTagsButton = document.getElementById("reset-tags-button")
      resetTagsButton.addEventListener('click', onClickResetTags)

      const clearTagsButton = document.getElementById("clear-tags-button")
      clearTagsButton.addEventListener('click', onClickClearTags)

      function onClickResetTags() {
        resetTagifyInput(tagsTagifyInput, allTags)
      }

      function onClickClearTags() {
        clearTagifyInput(tagsTagifyInput)
      }

      // init tags
      resetTagifyInput(tagsTagifyInput, [])

      tagsTagifyInput.on('change', (e) => {
        const filteredTags = getTagifyInputValues(tagsTagifyInput)
        updateGlobalFilter({ tags: filteredTags })
      })

      // Tagify: type input
      const resetTypesButton = document.getElementById("reset-types-button")
      resetTypesButton.addEventListener('click', onClickResetTypes)

      const clearTypesButton = document.getElementById("clear-types-button")
      clearTypesButton.addEventListener('click', onClickClearTypes)

      function onClickResetTypes() {
        resetTagifyInput(typeTagifyInput, allTypes)
      }

      function onClickClearTypes() {
        clearTagifyInput(typeTagifyInput)
      }
      
      // init types
      resetTagifyInput(typeTagifyInput, allTypes)

      typeTagifyInput.on('change', (e) => {
        const filteredTypes = getTagifyInputValues(typeTagifyInput)
        updateGlobalFilter({ types: filteredTypes })
      })

      function getTagifyInputValues(_tagifyInput) {
        return _tagifyInput.value.map(v => v.value)
      }

      // Handle filter changes
      function updateGlobalFilter(filterInputs) {
        //- update globalFilters, globalNotes and rerender timelineYp
        Object.entries(filterInputs).forEach(([filterName, filterVal]) => {
          //special treatment for tags
          if(filterName ==='tags') {
            const isAll = (!Array.isArray(filterVal) || !filterVal.length) 
            globalFilters[filterName] =  isAll ? 'all' : filterVal
          } else {
            globalFilters[filterName] = filterVal
          }
        })
        handleFilterChange()    
      }

      function handleFilterChange() {
        globalFilteredNotes = filterNotes(nts, inf, globalFilters)
        updateTimelines()
      }

      

      


      
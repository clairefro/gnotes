include mixins/noteLink
doctype html
html(lang='en')
  head
    title Home
    // vis.js
    script(src="modules/external/vis-js.min.js")
    link(href="modules/external/vis-js-timeline-graph2d.css" rel="stylesheet" type="text/css")
    // tagify 
    script(src="modules/external/tagify.min.js")
    script(src="modules/external/tagifypolyfills.js")
    link(href="modules/external/tagify.min.css" rel="stylesheet" type="text/css")
    // custom scripts
    script(src="modules/internal/script.js")
    // custom styles
    link(rel="stylesheet" href="styles/style.css")
    link(rel="stylesheet" href="styles/timeline.css")
  body
    h1 Home
    div 
      p Tags
      ul
        each tag in Object.keys(info.summary.tags.map)
          li= tag
    div 
      p Types
      ul
        each type in Object.keys(info.summary.types.map)
          li= type
    div
      each note in notes
        +notesLink(note) 

    label(for="tag-input") Tags
    input(name="tag-input")#tag-input
    div#timeline-yp

    script(type="text/javascript"). 
      const filters = {
        types: 'all',
        tags: 'all',
        authors: 'all'
      }

      const containerYp = document.getElementById('timeline-yp')
      // get notes and info from variable passed into template
      const nts = !{JSON.stringify(notes)}
      const inf = !{JSON.stringify(info)}

      const data = nts.map(n => ({ id: n.id, content: n.fm.title, start: new Date(n.fm.yearPublished, 0, 1)}))
      console.log({data})
      const items = new vis.DataSet(data);

      const options = {
        showCurrentTime: false
      };

      const timeline = new vis.Timeline(containerYp, items, options);


      const borges = filterNotes(nts, inf, { authors: ["Borges, Jorge Luis"], })
      console.log({borges})

      const tagInput = document.getElementById("tag-input"),
      tagsTag = new Tagify(tagInput, {
        id: 'tags',  // must be unique (per-tagify instance)
        duplicates: false,
        enforceWhitelist: true,
        whitelist: Object.keys(inf.summary.tags.map),
        dropdown: { 
          highlightFirst: true 
        },
      });
      //- tagsTag.addTags(Object.keys(inf.summary.tags.map))

      tagsTag.on('change', (e) => {
        console.log({e})
        const selected = tagsTag.value
        console.log(selected.map(v => v.value))
      })



      
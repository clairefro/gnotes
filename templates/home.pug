include mixins/noteLink
doctype html
html(lang='en')
  head
    title My notes
    // vis.js
    script(src="modules/external/vis-js.min.js")
    link(href="modules/external/vis-js-timeline-graph2d.css" rel="stylesheet" type="text/css")
    // tagify 
    script(src="modules/external/tagify.min.js")
    script(src="modules/external/tagify-polyfills.js")
    link(href="modules/external/tagify.min.css" rel="stylesheet" type="text/css")
    // custom scripts
    script(src="modules/internal/script.js")
    // custom styles
    link(rel="stylesheet" href="styles/style.css")
    link(rel="stylesheet" href="styles/timeline.css")

    meta(name="viewport" content="width=device-width, initial-scale=1.0")
  body
    h1 My notes 
    h2 Stats 
    h2 Explore
    details 
      summary Filters 
      div 
        label(for="types-input") Type
        button#reset-types-button (show all)
        button#clear-types-button (clear all)
        input(name="types-input")#types-input

        label(for="tag-input") Tags
        button#reset-tags-button (show all)
        button#clear-tags-button (clear all)
        input(name="tag-input")#tag-input
  
    p Scroll to zoom, drag to pan
    
    h3 By year published
    div#timeline-yp
    h3 By last noted
    div#timeline-ln
    
    div
      each note in notes
        +notesLink(note)

    script(type="text/javascript"). 
      //////////////////////////
      // GLOBAL STATE 
      const globalFilters = {
        types: 'all',
        tags: 'all',
        authors: 'all'
      }

      // get notes and info from variable passed into template
      const nts = !{JSON.stringify(notes)}
      const inf = !{JSON.stringify(info)}

      let globalFilteredNotes = [...nts]
      //////////////////////////
      // TIMELINE (vis.js)

      // Set up timelines
      const containerYp = document.getElementById('timeline-yp')
      const containerLn = document.getElementById('timeline-ln')

      const ypDatasetInit = toTimeLineDataset(notesToYpItems(globalFilteredNotes))
      const lnDatasetInit = toTimeLineDataset(notesToLnItems(globalFilteredNotes))

      const options = {
        showCurrentTime: false,
      };

      const timelineYp = new vis.Timeline(containerYp, ypDatasetInit, options);
      const timelineLn = new vis.Timeline(containerLn, lnDatasetInit, options);

      function updateTimelines() {
        const ypDataset = toTimeLineDataset(notesToYpItems(globalFilteredNotes))
        const lnDataset = toTimeLineDataset(notesToLnItems(globalFilteredNotes))

        timelineYp.setItems(ypDataset)
        timelineYp.redraw()

        timelineLn.setItems(lnDataset)
        timelineLn.redraw()
      }

      function notesToYpItems(_notes) {
        return _notes.map(n => ({ 
          id: n.id, 
          content: n.fm.title, 
          start: new Date(n.fm.yearPublished, 0, 1)
        }))
      }

      function notesToLnItems(_notes) {
        return _notes.map(n => ({ 
          id: n.id, 
          content: n.fm.title, 
          start: new Date(n.fm.lastNoted)
        }))
      }

      function toTimeLineDataset (_items) {
        return new vis.DataSet(_items)
      }
      
      ///////////////////////
      // TAGIFY 
      const sharedTagifyOpts = {
        duplicates: false,
        enforceWhitelist: true,
        skipInvalid: true,
        editTags: false,
        dropdown: { 
          enabled: 1,
          highlightFirst: true 
        },
      }
      const allTags = Object.keys(inf.summary.tags.map)
      const allTypes = Object.keys(inf.summary.types.map)

      const tagInput = document.getElementById("tag-input"),
      tagsTagifyInput = new Tagify(tagInput, {
        id: 'tags',  // must be unique (per-tagify instance)
        whitelist: allTags,
        ...sharedTagifyOpts
      });

      const typeInput = document.getElementById("types-input"),
      typeTagifyInput = new Tagify(typeInput, {
        id: 'types',  // must be unique (per-tagify instance)
        whitelist: allTypes,
        ...sharedTagifyOpts
      });

      // Tagify helpers
      function resetTagifyInput(tagifyInput, initialTags) {
        tagifyInput.removeAllTags()
        tagifyInput.addTags(initialTags)
      }

      function clearTagifyInput(tagifyInput) {
        tagifyInput.removeAllTags()
      }

      // Tagify: tags input
      const resetTagsButton = document.getElementById("reset-tags-button")
      resetTagsButton.addEventListener('click', onClickResetTags)

      const clearTagsButton = document.getElementById("clear-tags-button")
      clearTagsButton.addEventListener('click', onClickClearTags)

      function onClickResetTags() {
        resetTagifyInput(tagsTagifyInput, allTags)
      }

      function onClickClearTags() {
        clearTagifyInput(tagsTagifyInput)
      }

      resetTagifyInput(tagsTagifyInput, allTags)

      tagsTagifyInput.on('change', (e) => {
        const filteredTags = tagsTagifyInput.value.map(v => v.value)
        updateGlobalFilter({ tags: filteredTags })
      })

      // Tagify: type input
      const resetTypesButton = document.getElementById("reset-types-button")
      resetTypesButton.addEventListener('click', onClickResetTypes)

      const clearTypesButton = document.getElementById("clear-types-button")
      clearTypesButton.addEventListener('click', onClickClearTypes)

      function onClickResetTypes() {
        resetTagifyInput(typeTagifyInput, allTypes)
      }

      function onClickClearTypes() {
        clearTagifyInput(typeTagifyInput)
      }

      resetTagifyInput(typeTagifyInput, allTypes)

      typeTagifyInput.on('change', (e) => {
        const filteredTypes = typeTagifyInput.value.map(v => v.value)
        updateGlobalFilter({ types: filteredTypes })
      })

      // Handle filter changes

      function updateGlobalFilter(filterInputs) {
        //- update globalFilters, globalNotes and rerender timelineYp
        Object.entries(filterInputs).forEach(([filterName, filterVal]) => {
          globalFilters[filterName] = filterVal
        })
        handleFilterChange()    
      }

      function handleFilterChange() {
        globalFilteredNotes = filterNotes(nts, inf, globalFilters)
        updateTimelines()
      }

      


      
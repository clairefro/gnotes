include mixins/noteLink
doctype html
html(lang='en')
  head
    title Home
    // vis.js
    script(src="modules/external/vis-js.min.js")
    link(href="modules/external/vis-js-timeline-graph2d.css" rel="stylesheet" type="text/css")
    // tagify 
    script(src="modules/external/tagify.min.js")
    script(src="modules/external/tagify-polyfills.js")
    link(href="modules/external/tagify.min.css" rel="stylesheet" type="text/css")
    // custom scripts
    script(src="modules/internal/script.js")
    // custom styles
    link(rel="stylesheet" href="styles/style.css")
    link(rel="stylesheet" href="styles/timeline.css")
  body
    h1 Home
    div 
      p Tags
      ul
        each tag in Object.keys(info.summary.tags.map)
          li= tag
    div 
      p Types
      ul
        each type in Object.keys(info.summary.types.map)
          li= type
    div
      each note in notes
        +notesLink(note) 

    label(for="tag-input") Tags
    button#reset-tags-button (show all)
    button#clear-tags-button (clear all)
    input(name="tag-input")#tag-input
    div#timeline-yp

    script(type="text/javascript"). 
      //////////////////////////
      // GLOBAL STATE 
      const globalFilters = {
        types: 'all',
        tags: 'all',
        authors: 'all'
      }

      // get notes and info from variable passed into template
      const nts = !{JSON.stringify(notes)}
      const inf = !{JSON.stringify(info)}

      let globalFilteredNotes = [...nts]
      //////////////////////////

      // Set up timeline (year published)
      const containerYp = document.getElementById('timeline-yp')
      const items = notesToTimelineDataset(globalFilteredNotes)

      const options = {
        showCurrentTime: false
      };

      const timelineYp = new vis.Timeline(containerYp, items, options);
      
      const allTags = Object.keys(inf.summary.tags.map)
      const tagInput = document.getElementById("tag-input"),
      tagsTagifyInput = new Tagify(tagInput, {
        id: 'tags',  // must be unique (per-tagify instance)
        duplicates: false,
        enforceWhitelist: true,
        whitelist: allTags,
        skipInvalid: true,
        editTags: false,
        dropdown: { 
          enabled: 1,
          highlightFirst: true 
        },
      });

      // Reset tags on page load
      function resetTagifyInput(tagifyInput, initialTags) {
        tagifyInput.removeAllTags()
        tagifyInput.addTags(initialTags)
      }

      function clearTagifyInput(tagifyInput) {
        tagifyInput.removeAllTags()
      }

      const resetTagsButton = document.getElementById("reset-tags-button")
      resetTagsButton.addEventListener('click', onClickResetTags)

      const clearTagsButton = document.getElementById("clear-tags-button")
      clearTagsButton.addEventListener('click', onClickClearTags)

      function onClickResetTags() {
        resetTagifyInput(tagsTagifyInput, allTags)
      }

      function onClickClearTags() {
        clearTagifyInput(tagsTagifyInput)
      }

      resetTagifyInput(tagsTagifyInput, allTags)

      tagsTagifyInput.on('change', (e) => {
        const filteredTags = tagsTagifyInput.value.map(v => v.value)
        updateFilter({ tags: filteredTags })
      })

      function updateFilter(filterInputs) {
        //- update globalFilters, global and rerender timelineYp
        Object.entries(filterInputs).forEach(([filterName, filterVal]) => {
          globalFilters[filterName] = filterVal
        })
        globalFilteredNotes = filterNotes(nts, inf, globalFilters)
        const data = notesToTimelineDataset(globalFilteredNotes)
        timelineYp.setItems(data)
        timelineYp.redraw()
      }

      function notesToTimelineDataset (_notes) {
        return new vis.DataSet(_notes.map(n => ({ 
          id: n.id, 
          content: n.fm.title, 
          start: new Date(n.fm.yearPublished, 0, 1)
        })))
      }


      